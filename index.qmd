---
title: "Disaster Damage and Response Estimation"
author: "Th√©ophile L. Mouton"
date: "`r Sys.Date()`"
include-after-body: "asset/footer.html"
css: "asset/style.css"
format:
  html:
    template-partials: 
      - asset/title-block.html
    toc: true
    toc-depth: 3
    toc-location: left
    number-sections: true
    highlight-style: github
    code-fold: true
    code-tools: true
    code-summary: "Show code"
    theme: cosmo
    fig-width: 8
    fig-height: 6
    fig-dpi: 300
    self-contained: false
execute:
  echo: true
  warning: false
  message: false
  error: false
---

# Intro

This report runs based on a config file which provides the cyclone intensity applied to each council in Vanuatu. It has 5 columns:

- National
- Province
- Area Council
- Hazard
- Intensity (number from 2 to 3)

Let's load this file to use it later in our analysis:

```{r}
config <- read.csv(here::here("Data", "Ex_hazard_areas.csv"), check.names = FALSE)
```




Another file that will be useful: a 2 columns dataframe that provides the list of councils with their Province
```{r}
council_province_lookup <- read.csv("data/council_province_lookup.csv")
```




And load the required libs
```{r, warning=FALSE, message=FALSE}
# Load required packages
library(dplyr)
library(tidyr)
library(reactable)
library(htmltools)
library(readxl)
library(here)
```





Order of councils and provinces in the final tables:

```{r}
# Define the custom order for regions
region_order <- c(
  "National", # Will be displayed as Vanuatu
  "Torba", "Torres", "Ureparapara", "Motalava", "West Vanualava", "East Vanualava", 
  "Mota", "East Gaua", "West Gaua", "Merelava",
  "Sanma", "Luganville", "North West Santo", "Big Bay Coast", "Big Bay Inland", 
  "West Santo", "South Santo 1", "South Santo 2", "East Santo", "South East Santo", 
  "Canal - Fanafo", "West Malo", "East Malo",
  "Penama", "West Ambae", "North Ambae", "East Ambae", "South Ambae", "North Maewo", 
  "South Maewo", "North Pentecost", "Central Pentecost 1", "Central Pentecost 2", 
  "South Pentecost",
  "Malampa", "North West Malekula", "North East Malekula", "Central Malekula", 
  "South West Malekula", "South East Malekula", "South Malekula", "North Ambrym", 
  "West Ambrym", "South East Ambrym", "Paama",
  "Shefa", "Port Vila", "Vermali", "Vermaul", "Varisu", "South Epi", "North Tongoa", 
  "Tongariki", "Makimae", "Nguna", "Emau", "Malorua", "North Efate", "Mele", 
  "Tanvasoko", "Ifira", "Pango", "Erakor", "Eratap", "Eton",
  "Tafea", "North Erromango", "South Erromango", "Aniwa", "North Tanna", "West Tanna", 
  "Middle Bush Tanna", "South West Tanna", "Whitesands", "South Tanna", "Futuna", "Aneityum"
)

# Provincial levels (to be bolded)
provinces <- c("National", "Torba", "Sanma", "Penama", "Malampa", "Shefa", "Tafea")
```





A function to aggregate a table with one row per council. It adds value per province and for the whole country
```{r}
# council_data must be a data frame with a column called "Region"
compute_council_aggregates <- function(council_data) {
  
  province_data <- council_data %>%
    left_join(council_province_lookup, by = c("Region" = "Council")) %>%
    group_by(Province) %>%
    summarise(across(where(is.numeric), sum, na.rm = TRUE), .groups = "drop") %>%
    rename(Region = Province)  
  
  national_data <- province_data %>%
    summarise(across(where(is.numeric), sum, na.rm = TRUE)) %>%
    mutate(Region = "National")
  
  result <- bind_rows(
    national_data,
    province_data,
    council_data
  )
  
  # Add default order and formatting columns
  result <- result %>%
    mutate(default_order = match(Region, region_order)) %>%
    arrange(default_order) %>%
    select(-default_order)

  return(result)
}

format_table <- function(data){
  result <- data %>%
    select(Region, everything()) %>% 
    mutate(
      Region = ifelse(
        Region %in% provinces, 
        paste0("<b>", Region, "</b>"), 
        Region
      )
    )
  return(result)
}
```

# Education

## Baseline: Number of Schools, Students, and Teachers

```{r}
full_data <- read.csv(here::here("Data", "1c_input_baseline.csv"), check.names = FALSE)

# === DATA WRANGLING ===
# Filter for Education in Baseline column and Area Council level data
education_data <- full_data %>%
  filter(Baseline == "Education") %>%  # Changed to filter Baseline column
  filter(Year == max(Year, na.rm = TRUE)) %>%  # Filter for the latest year
  filter(!is.na(`Area Council`)) %>%
  mutate(Region = `Area Council`)

# Reshape the data to get Schools, Students, Teachers as separate columns
education_wide <- education_data %>%
  mutate(
    education_level = tolower(Attribute),  # Keep lowercase for consistency
    measure_type = case_when(
      grepl("Number Schools", Indicator) ~ "schools",
      grepl("Students", Indicator) ~ "students",
      grepl("Teachers", Indicator) ~ "teachers",
      TRUE ~ "other"
    )
  ) %>%
  filter(measure_type %in% c("schools", "students", "teachers")) %>%
  select(Region, education_level, measure_type, Value) %>%
  pivot_wider(
    names_from = c(education_level, measure_type),
    values_from = Value,
    names_sep = "_"
  ) %>%
  mutate(across(where(is.numeric), ~replace_na(.x, 0)))

# Compute aggregates (province and national levels)
education_aggregated <- compute_council_aggregates(education_wide)

# === PRESENTATION ===
# Format for display
formatted <- format_table(education_aggregated)

# Create the reactable with proper case labels
reactable(
  formatted,
  columns = list(
    Region = colDef(
      name = "Region", 
      minWidth = 150,
      sortable = TRUE,
      defaultSortOrder = "asc",
      html = TRUE,
      sticky = "left"
    ),
    
    # ECCE columns
    ecce_schools = colDef(name = "Schools", format = colFormat(digits = 0)),
    ecce_students = colDef(name = "Students", format = colFormat(digits = 0)),
    ecce_teachers = colDef(name = "Teachers", format = colFormat(digits = 0)),
    
    # Primary columns  
    primary_schools = colDef(name = "Schools", format = colFormat(digits = 0)),
    primary_students = colDef(name = "Students", format = colFormat(digits = 0)),
    primary_teachers = colDef(name = "Teachers", format = colFormat(digits = 0)),
    
    # Secondary columns
    secondary_schools = colDef(name = "Schools", format = colFormat(digits = 0)),
    secondary_students = colDef(name = "Students", format = colFormat(digits = 0)),
    secondary_teachers = colDef(name = "Teachers", format = colFormat(digits = 0))
  ),
  columnGroups = list(
    colGroup(name = "Region", columns = c("Region")),
    colGroup(name = "ECCE", columns = c("ecce_schools", "ecce_students", "ecce_teachers")),
    colGroup(name = "Primary", columns = c("primary_schools", "primary_students", "primary_teachers")),
    colGroup(name = "Secondary", columns = c("secondary_schools", "secondary_students", "secondary_teachers"))
  ),
  striped = TRUE,
  highlight = TRUE,
  bordered = TRUE,
  theme = reactableTheme(
    headerStyle = list(
      "&:hover" = list(background = "#eee")
    ),
    borderColor = "#ddd",
    stripedColor = "#f6f8fa"
  ),
  defaultPageSize = 15,
  showPageSizeOptions = TRUE,
  pageSizeOptions = c(10, 15, 25, 50, 75, 100),
  showSortable = TRUE
)
```





## Estimating damage: Number of damaged schools and students affected

```{r}
# === DATA WRANGLING ===
# Add cyclone strength to baseline values
education_with_config <- education_wide %>%
  left_join(config, by = c("Region" = "Area Council"))

# Load the baseline multiplying factors: 2a Input- Damage Multiplier (sheet 6)
# Read CSV while preserving column names with spaces
baseline_factors <- read.csv(
  here::here("Data", "2a Input- Damage Multiplier.csv"),
  check.names = FALSE
)

# Helper function for damage multipliers (now considers council-specific values)
get_damage_multiplier <- function(cyclone_category, education_level, measure_type, area_council) {
  intensity_col <- paste0("Intensity ", cyclone_category)
  
  multiplier <- baseline_factors %>%
    filter(
      Cluster == "Education",
      Attribute == education_level,
      grepl(measure_type, Indicator, ignore.case = TRUE),
      `Area Council` == area_council  # Add council-specific filter
    )
  
  # Check if we got any results
  if(nrow(multiplier) == 0) {
    return(0)
  }
  
  # Extract the value from the intensity column
  result <- multiplier[[intensity_col]][1]
  
  return(ifelse(is.na(result) || length(result) == 0, 0, result))
}

# Calculate damage estimates
damage_estimates <- education_with_config %>%
  filter(!is.na(Intensity)) %>%
  rowwise() %>%
  mutate(
    # ECCE - now passing Region to get council-specific multipliers
    ecce_schools_damaged = round(ecce_schools * get_damage_multiplier(Intensity, "ecce", "schools", Region)),
    ecce_students_affected = round(ecce_students * get_damage_multiplier(Intensity, "ecce", "students", Region)),
    
    # Primary
    primary_schools_damaged = round(primary_schools * get_damage_multiplier(Intensity, "primary", "schools", Region)),
    primary_students_affected = round(primary_students * get_damage_multiplier(Intensity, "primary", "students", Region)),
    
    # Secondary
    secondary_schools_damaged = round(secondary_schools * get_damage_multiplier(Intensity, "secondary", "schools", Region)),
    secondary_students_affected = round(secondary_students * get_damage_multiplier(Intensity, "secondary", "students", Region))
  ) %>%
  ungroup() %>%
  select(Region, contains("_damaged"), contains("_affected"))

# Aggregate to province and national levels
damage_estimates_full <- compute_council_aggregates(damage_estimates)

# === PRESENTATION ===
# Format for display
formatted <- format_table(damage_estimates_full)

# Create the damage estimation reactable
reactable(
  formatted,
  columns = list(
    Region = colDef(
      name = "Region", 
      minWidth = 150,
      sticky = "left",
      html = TRUE
    ),
    
    # ECCE columns
    ecce_schools_damaged = colDef(name = "Schools Damaged", format = colFormat(digits = 0)),
    ecce_students_affected = colDef(name = "Students Affected", format = colFormat(digits = 0)),
    
    # Primary columns  
    primary_schools_damaged = colDef(name = "Schools Damaged", format = colFormat(digits = 0)),
    primary_students_affected = colDef(name = "Students Affected", format = colFormat(digits = 0)),
    
    # Secondary columns
    secondary_schools_damaged = colDef(name = "Schools Damaged", format = colFormat(digits = 0)),
    secondary_students_affected = colDef(name = "Students Affected", format = colFormat(digits = 0))
  ),
  columnGroups = list(
    colGroup(name = "Region", columns = c("Region")),
    colGroup(name = "ECCE", columns = c("ecce_schools_damaged", "ecce_students_affected")),
    colGroup(name = "Primary", columns = c("primary_schools_damaged", "primary_students_affected")),
    colGroup(name = "Secondary", columns = c("secondary_schools_damaged", "secondary_students_affected"))
  ),
  striped = TRUE,
  highlight = TRUE,
  bordered = TRUE,
  theme = reactableTheme(
    headerStyle = list(
      "&:hover" = list(background = "#eee")
    ),
    borderColor = "#ddd",
    stripedColor = "#f6f8fa"
  ),
  defaultPageSize = 15,
  showPageSizeOptions = TRUE,
  pageSizeOptions = c(10, 15, 25, 50, 75, 100),
  showSortable = TRUE
)

```




## Resources needed to be sent to those affected

```{r}
# === DATA WRANGLING ===
# Load the resource response configuration "3aii Input- Resources Sent" (sheet 10)
#resource_config <- read_excel(here("data", "13. Resource_Sent_Response.xlsx"))

resource_config <- read.csv(here::here("Data", "3aii Input- Resources Sent.csv"))

# Helper function to get resource multipliers from config
get_resource_multiplier <- function(resource_type) {
  multiplier <- resource_config %>%
    filter(Cluster == "Education", Indicator == resource_type) %>%
    pull(Value)
  
  return(ifelse(length(multiplier) > 0, multiplier, 0))
}

# Configuration parameters
days_of_support <- 14  # Number of days to provide resources

# Add cyclone categories from config file to education baseline data
education_with_config_resources <- education_wide %>%
  left_join(config, by = c("Region" = "Area Council"))

# Calculate resources needed using council-specific cyclone categories
resources_needed <- education_with_config_resources %>%
  filter(!is.na(Intensity)) %>%  # Only calculate for councils with assigned categories
  rowwise() %>%
  mutate(
    # Get damage multiplier for this council's specific cyclone category
    damage_multiplier = get_damage_multiplier(Intensity, "ecce", "schools"),
    
    # ECCE Resources
    ecce_tents = round(ecce_schools * damage_multiplier * get_resource_multiplier("Tent"), 0),
    ecce_solar_lamps = round(ecce_schools * damage_multiplier * get_resource_multiplier("Solar Lamp"), 0),
    ecce_water = ceiling(ecce_students * damage_multiplier * get_resource_multiplier("Water") * days_of_support),
    ecce_rice = round(ecce_students * damage_multiplier * get_resource_multiplier("Rice") * days_of_support, 1),
    ecce_tin_fish = round(ecce_students * damage_multiplier * get_resource_multiplier("Tin fish") * days_of_support, 0),
    
    # Primary Resources
    primary_tents = round(primary_schools * damage_multiplier * get_resource_multiplier("Tent"), 0),
    primary_solar_lamps = round(primary_schools * damage_multiplier * get_resource_multiplier("Solar Lamp"), 0),
    primary_water = ceiling(primary_students * damage_multiplier * get_resource_multiplier("Water") * days_of_support),
    primary_rice = round(primary_students * damage_multiplier * get_resource_multiplier("Rice") * days_of_support, 1),
    primary_tin_fish = round(primary_students * damage_multiplier * get_resource_multiplier("Tin fish") * days_of_support, 0),
    
    # Secondary Resources
    secondary_tents = round(secondary_schools * damage_multiplier * get_resource_multiplier("Tent"), 0),
    secondary_solar_lamps = round(secondary_schools * damage_multiplier * get_resource_multiplier("Solar Lamp"), 0),
    secondary_water = ceiling(secondary_students * damage_multiplier * get_resource_multiplier("Water") * days_of_support),
    secondary_rice = round(secondary_students * damage_multiplier * get_resource_multiplier("Rice") * days_of_support, 1),
    secondary_tin_fish = round(secondary_students * damage_multiplier * get_resource_multiplier("Tin fish") * days_of_support, 0),
    
    # Total Resources (sum across all education levels)
    total_tents = ecce_tents + primary_tents + secondary_tents,
    total_solar_lamps = ecce_solar_lamps + primary_solar_lamps + secondary_solar_lamps,
    total_water = ecce_water + primary_water + secondary_water,
    total_rice = round(ecce_rice + primary_rice + secondary_rice, 1),
    total_tin_fish = ecce_tin_fish + primary_tin_fish + secondary_tin_fish
  ) %>%
  ungroup() %>%
  select(Region, contains("tents"), contains("solar_lamps"), contains("water"), contains("rice"), contains("tin_fish"))

# Aggregate to province and national levels
resources_needed_full <- compute_council_aggregates(resources_needed)

# === PRESENTATION ===
# Format for display
formatted <- format_table(resources_needed_full)

# Create the resources needed reactable
reactable(
  formatted,
  columns = list(
    Region = colDef(
      name = "Region", 
      minWidth = 150,
      sticky = "left",
      html = TRUE
    ),
    
    # ECCE columns
    ecce_tents = colDef(name = "Tents", format = colFormat(digits = 0)),
    ecce_solar_lamps = colDef(name = "Solar Lamps", format = colFormat(digits = 0)),
    ecce_water = colDef(name = "Water (1L bottles)", format = colFormat(digits = 0)),
    ecce_rice = colDef(name = "Rice (kg)", format = colFormat(digits = 1)),
    ecce_tin_fish = colDef(name = "Tinned Fish", format = colFormat(digits = 0)),
    
    # Primary columns  
    primary_tents = colDef(name = "Tents", format = colFormat(digits = 0)),
    primary_solar_lamps = colDef(name = "Solar Lamps", format = colFormat(digits = 0)),
    primary_water = colDef(name = "Water (1L bottles)", format = colFormat(digits = 0)),
    primary_rice = colDef(name = "Rice (kg)", format = colFormat(digits = 1)),
    primary_tin_fish = colDef(name = "Tinned Fish", format = colFormat(digits = 0)),
    
    # Secondary columns
    secondary_tents = colDef(name = "Tents", format = colFormat(digits = 0)),
    secondary_solar_lamps = colDef(name = "Solar Lamps", format = colFormat(digits = 0)),
    secondary_water = colDef(name = "Water (1L bottles)", format = colFormat(digits = 0)),
    secondary_rice = colDef(name = "Rice (kg)", format = colFormat(digits = 1)),
    secondary_tin_fish = colDef(name = "Tinned Fish", format = colFormat(digits = 0)),
    
    # Total columns
    total_tents = colDef(name = "Tents", format = colFormat(digits = 0)),
    total_solar_lamps = colDef(name = "Solar Lamps", format = colFormat(digits = 0)),
    total_water = colDef(name = "Water (1L bottles)", format = colFormat(digits = 0)),
    total_rice = colDef(name = "Rice (kg)", format = colFormat(digits = 1)),
    total_tin_fish = colDef(name = "Tinned Fish", format = colFormat(digits = 0))
  ),
  columnGroups = list(
    colGroup(name = "Region", columns = c("Region")),
    colGroup(name = "ECCE", columns = c("ecce_tents", "ecce_solar_lamps", "ecce_water", "ecce_rice", "ecce_tin_fish")),
    colGroup(name = "Primary", columns = c("primary_tents", "primary_solar_lamps", "primary_water", "primary_rice", "primary_tin_fish")),
    colGroup(name = "Secondary", columns = c("secondary_tents", "secondary_solar_lamps", "secondary_water", "secondary_rice", "secondary_tin_fish")),
    colGroup(name = "Totals", columns = c("total_tents", "total_solar_lamps", "total_water", "total_rice", "total_tin_fish"))
  ),
  striped = TRUE,
  highlight = TRUE,
  bordered = TRUE,
  theme = reactableTheme(
    headerStyle = list(
      "&:hover" = list(background = "#eee")
    ),
    borderColor = "#ddd",
    stripedColor = "#f6f8fa"
  ),
  defaultPageSize = 15,
  showPageSizeOptions = TRUE,
  pageSizeOptions = c(10, 15, 25, 50, 75, 100),
  showSortable = TRUE
)
```




## Estimate financial damage from cyclone

```{r}

# === DATA WRANGLING ===
# Load the financial damage estimation config (4a Input- Finance Estimates, sheet 13)
# Read CSV while preserving column names with spaces
financial_config <- read.csv(
  here::here("Data", "4a Input- Finance Estimates.csv"),
  check.names = FALSE
)

# Clean column names to remove any extra spaces
names(financial_config) <- trimws(names(financial_config))

# Helper function to get unit costs from config
get_unit_cost <- function(school_type) {
  unit_cost <- financial_config %>%
    filter(
      trimws(Cluster) == "Education", 
      trimws(tolower(Attribute)) == tolower(school_type),
      grepl("Number Schools", trimws(Indicator), ignore.case = TRUE)
    ) %>%
    pull(Value)
  
  return(ifelse(length(unit_cost) > 0, unit_cost, 0))
}

# Add cyclone categories from config file to education baseline data
education_with_config_financial <- education_wide %>%
  left_join(config, by = c("Region" = "Area Council"))

# Calculate financial damage using council-specific cyclone categories
financial_damage <- education_with_config_financial %>%
  filter(!is.na(Intensity)) %>%
  rowwise() %>%
  mutate(
    # Use Intensity directly (it's already just a number: 2, 3, 4, or 5)
    damage_multiplier = get_damage_multiplier(Intensity, "ecce", "schools"),
    
    # Calculate financial damage per education level (in VT)
    ecce_financial_damage = ecce_schools * get_unit_cost("ecce") * damage_multiplier,
    primary_financial_damage = primary_schools * get_unit_cost("primary") * damage_multiplier,
    secondary_financial_damage = secondary_schools * get_unit_cost("secondary") * damage_multiplier,
    
    # Calculate total financial damage
    total_financial_damage = ecce_financial_damage + primary_financial_damage + secondary_financial_damage
  ) %>%
  ungroup() %>%
  select(Region, contains("financial_damage"))

# Aggregate to province and national levels
financial_damage_full <- compute_council_aggregates(financial_damage)

# === PRESENTATION ===
# Format for display
formatted <- format_table(financial_damage_full)

# Create the financial damage reactable
reactable(
  formatted,
  columns = list(
    Region = colDef(
      name = "Region", 
      minWidth = 150,
      sticky = "left",
      html = TRUE
    ),
    
    # Financial damage columns
    ecce_financial_damage = colDef(
      name = "ECCE", 
      format = colFormat(suffix = " VT", separators = TRUE, digits = 0)
    ),
    primary_financial_damage = colDef(
      name = "Primary", 
      format = colFormat(suffix = " VT", separators = TRUE, digits = 0)
    ),
    secondary_financial_damage = colDef(
      name = "Secondary", 
      format = colFormat(suffix = " VT", separators = TRUE, digits = 0)
    ),
    total_financial_damage = colDef(
      name = "Total", 
      format = colFormat(suffix = " VT", separators = TRUE, digits = 0)
    )
  ),
  columnGroups = list(
    colGroup(name = "Region", columns = c("Region")),
    colGroup(name = "Financial Damage (VT)", columns = c("ecce_financial_damage", "primary_financial_damage", "secondary_financial_damage", "total_financial_damage"))
  ),
  striped = TRUE,
  highlight = TRUE,
  bordered = TRUE,
  theme = reactableTheme(
    headerStyle = list(
      "&:hover" = list(background = "#eee")
    ),
    borderColor = "#ddd",
    stripedColor = "#f6f8fa"
  ),
  defaultPageSize = 15,
  showPageSizeOptions = TRUE,
  pageSizeOptions = c(10, 15, 25, 50, 75, 100),
  showSortable = TRUE
)

```
