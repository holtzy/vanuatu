---
title: "Disaster Damage and Response Estimation"
author: "Th√©ophile L. Mouton"
date: "`r Sys.Date()`"
format:
  html:
    toc: true
    toc-depth: 3
    toc-location: left
    number-sections: true
    highlight-style: github
    code-fold: true
    code-tools: true
    code-summary: "Show code"
    theme: cosmo
    fig-width: 8
    fig-height: 6
    fig-dpi: 300
    self-contained: true
execute:
  echo: true
  warning: false
  message: false
  error: false
editor: visual
---

# Education

## Baseline: Number of Schools, Students, and Teachers

```{r}

# Load required packages
library(here)
library(readxl)

# Read the Excel file
full_data <- read_excel(here("Second documents", "11b. Full Data Set.xlsx"))

# Load required packages
library(dplyr)
library(tidyr)
library(reactable)
library(htmltools)

# Filter for Education cluster only
education_data <- full_data %>%
  filter(Cluster == "Education")

# First, get only Area Council level data (the most granular level)
area_council_data <- education_data %>%
  filter(!is.na(`Area Council`)) %>%
  mutate(Region = `Area Council`)

# Create province-level aggregates by summing area councils
province_data <- area_council_data %>%
  group_by(Province, Indicator, Attribute) %>%
  summarise(Value = sum(Value, na.rm = TRUE), .groups = "drop") %>%
  mutate(Region = Province)

# Create national-level aggregates by summing provinces
national_data <- province_data %>%
  group_by(Indicator, Attribute) %>%
  summarise(Value = sum(Value, na.rm = TRUE), .groups = "drop") %>%
  mutate(Region = "National")

# Combine all levels
education_data <- bind_rows(
  area_council_data %>% select(Region, Indicator, Attribute, Value),
  province_data %>% select(Region, Indicator, Attribute, Value),
  national_data %>% select(Region, Indicator, Attribute, Value)
)

# Reshape the data to get Schools, Students, Teachers as separate columns
# and ECCE, Primary, Secondary as rows that will become columns
education_wide <- education_data %>%
  # Create a combined indicator for what we're measuring
  mutate(
    Education_Level = case_when(
      Attribute == "ecce" ~ "ECCE",
      Attribute == "primary" ~ "Primary", 
      Attribute == "secondary" ~ "Secondary",
      TRUE ~ Attribute
    ),
    Measure_Type = case_when(
      grepl("Number Schools", Indicator) ~ "Schools",
      grepl("Students", Indicator) ~ "Students",
      grepl("Teachers", Indicator) ~ "Teachers",
      TRUE ~ "Other"
    )
  ) %>%
  # Filter out any rows that don't match our expected measure types
  filter(Measure_Type %in% c("Schools", "Students", "Teachers")) %>%
  # Select relevant columns
  select(Region, Education_Level, Measure_Type, Value) %>%
  # Pivot wider to get the structure we want
  pivot_wider(
    names_from = c(Education_Level, Measure_Type),
    values_from = Value,
    names_sep = "_"
  ) %>%
  # Replace NA with 0 or empty string as appropriate
  mutate(across(where(is.numeric), ~replace_na(.x, 0)))

# Define the custom order for regions
region_order <- c(
  "National", # Will be displayed as Vanuatu
  "Torba", "Torres", "Ureparapara", "Motalava", "West Vanualava", "East Vanualava", 
  "Mota", "East Gaua", "West Gaua", "Merelava",
  "Sanma", "Luganville", "North West Santo", "Big Bay Coast", "Big Bay Inland", 
  "West Santo", "South Santo 1", "South Santo 2", "East Santo", "South East Santo", 
  "Canal - Fanafo", "West Malo", "East Malo",
  "Penama", "West Ambae", "North Ambae", "East Ambae", "South Ambae", "North Maewo", 
  "South Maewo", "North Pentecost", "Central Pentecost 1", "Central Pentecost 2", 
  "South Pentecost",
  "Malampa", "North West Malekula", "North East Malekula", "Central Malekula", 
  "South West Malekula", "South East Malekula", "South Malekula", "North Ambrym", 
  "West Ambrym", "South East Ambrym", "Paama",
  "Shefa", "Port Vila", "Vermali", "Vermaul", "Varisu", "South Epi", "North Tongoa", 
  "Tongariki", "Makimae", "Nguna", "Emau", "Malorua", "North Efate", "Mele", 
  "Tanvasoko", "Ifira", "Pango", "Erakor", "Eratap", "Eton",
  "Tafea", "North Erromango", "South Erromango", "Aniwa", "North Tanna", "West Tanna", 
  "Middle Bush Tanna", "South West Tanna", "Whitesands", "South Tanna", "Futuna", "Aneityum"
)

# Provincial levels (to be bolded)
provinces <- c("National", "Torba", "Sanma", "Penama", "Malampa", "Shefa", "Tafea")

# Add default order and formatting columns
education_wide <- education_wide %>%
  mutate(
    # Convert "National" to "Vanuatu" for display
    Region_Display = ifelse(Region == "National", "Vanuatu", Region),
    # Create order based on custom sequence
    default_order = match(Region, region_order),
    # Add bold formatting for provinces
    Region_Formatted = ifelse(Region %in% provinces, 
                             paste0("<b>", Region_Display, "</b>"), 
                             Region_Display)
  ) %>%
  # Sort by the custom order
  arrange(default_order)

# Create the reactable with nested headers
reactable(
  education_wide %>% select(Region_Formatted, everything(), -Region, -Region_Display, -default_order),
  columns = list(
    Region_Formatted = colDef(
      name = "Region", 
      minWidth = 150,
      sortable = TRUE,
      defaultSortOrder = "asc",
      html = TRUE, # Allow HTML formatting for bold text
      sticky = "left" # Freeze the column on the left
    ),
    
    # ECCE columns
    ECCE_Schools = colDef(name = "Schools", format = colFormat(digits = 0)),
    ECCE_Students = colDef(name = "Students", format = colFormat(digits = 0)),
    ECCE_Teachers = colDef(name = "Teachers", format = colFormat(digits = 0)),
    
    # Primary columns  
    Primary_Schools = colDef(name = "Schools", format = colFormat(digits = 0)),
    Primary_Students = colDef(name = "Students", format = colFormat(digits = 0)),
    Primary_Teachers = colDef(name = "Teachers", format = colFormat(digits = 0)),
    
    # Secondary columns
    Secondary_Schools = colDef(name = "Schools", format = colFormat(digits = 0)),
    Secondary_Students = colDef(name = "Students", format = colFormat(digits = 0)),
    Secondary_Teachers = colDef(name = "Teachers", format = colFormat(digits = 0))
  ),
  columnGroups = list(
    colGroup(name = "Region", columns = c("Region_Formatted")), # This creates the top-level header
    colGroup(name = "ECCE", columns = c("ECCE_Schools", "ECCE_Students", "ECCE_Teachers")),
    colGroup(name = "Primary", columns = c("Primary_Schools", "Primary_Students", "Primary_Teachers")),
    colGroup(name = "Secondary", columns = c("Secondary_Schools", "Secondary_Students", "Secondary_Teachers"))
  ),
  # defaultSorted is not needed since data is pre-sorted by arrange(default_order)
  striped = TRUE,
  highlight = TRUE,
  bordered = TRUE,
  theme = reactableTheme(
    headerStyle = list(
      "&:hover" = list(background = "#eee")
    ),
    borderColor = "#ddd",
    stripedColor = "#f6f8fa"
  ),
  defaultPageSize = 15, # Show all rows by default
  showPageSizeOptions = TRUE, # Hide page size options since we're showing all
  pageSizeOptions = c(10, 15, 25, 50, 75, 100), # Keep options available if needed
  showSortable = TRUE
)
```


## Estimating damage: Number of damaged schools and students affected

```{r}

# Load required packages
library(dplyr)
library(tidyr)
library(reactable)
library(htmltools)
library(readxl)

# Load the baseline multiplying factors
baseline_factors <- read_excel(here("Second documents", "12. Baseline_Multiplying_Factors.xlsx"))

# Create a configuration function for damage multipliers
get_damage_multiplier <- function(cyclone_category, education_level, measure_type) {
  # Filter the baseline factors for education and the specific combination
  multiplier <- baseline_factors %>%
    filter(
      Cluster == "Education",
      Attribute == tolower(education_level),
      grepl(measure_type, Indicator, ignore.case = TRUE)
    ) %>%
    pull(!!paste0("Category ", cyclone_category))
  
  return(ifelse(length(multiplier) > 0, multiplier, 0))
}

# Create damage estimation function
calculate_damage <- function(region_data, cyclone_category) {
  
  # Calculate damages using multipliers for each row
  region_data %>%
    mutate(
      # ECCE damages
      ECCE_Schools_Damaged = round(ECCE_Schools * get_damage_multiplier(cyclone_category, "ecce", "Schools")),
      ECCE_Students_Affected = round(ECCE_Students * get_damage_multiplier(cyclone_category, "ecce", "Students")),
      
      # Primary damages  
      Primary_Schools_Damaged = round(Primary_Schools * get_damage_multiplier(cyclone_category, "primary", "Schools")),
      Primary_Students_Affected = round(Primary_Students * get_damage_multiplier(cyclone_category, "primary", "Students")),
      
      # Secondary damages
      Secondary_Schools_Damaged = round(Secondary_Schools * get_damage_multiplier(cyclone_category, "secondary", "Schools")),
      Secondary_Students_Affected = round(Secondary_Students * get_damage_multiplier(cyclone_category, "secondary", "Students"))
    ) %>%
    select(Region_Formatted, contains("_Damaged"), contains("_Affected"))
}

# For now, let's assume a default cyclone category (you can modify this)
# Example: Category 4 cyclone affecting all regions
default_cyclone_category <- 4

# Apply damage calculations to all regions from the education_wide dataset
damage_estimates <- education_wide %>%
  select(Region_Formatted, contains("ECCE"), contains("Primary"), contains("Secondary")) %>%
  calculate_damage(default_cyclone_category)

# Create the damage estimation reactable
reactable(
  damage_estimates,
  columns = list(
    Region_Formatted = colDef(
      name = "Region", 
      minWidth = 150,
      sticky = "left",
      html = TRUE # Allow HTML formatting for bold text (national/provincial levels)
    ),
    
    # ECCE columns
    ECCE_Schools_Damaged = colDef(name = "Schools Damaged", format = colFormat(digits = 0)),
    ECCE_Students_Affected = colDef(name = "Students Affected", format = colFormat(digits = 0)),
    
    # Primary columns  
    Primary_Schools_Damaged = colDef(name = "Schools Damaged", format = colFormat(digits = 0)),
    Primary_Students_Affected = colDef(name = "Students Affected", format = colFormat(digits = 0)),
    
    # Secondary columns
    Secondary_Schools_Damaged = colDef(name = "Schools Damaged", format = colFormat(digits = 0)),
    Secondary_Students_Affected = colDef(name = "Students Affected", format = colFormat(digits = 0))
  ),
  columnGroups = list(
    colGroup(name = "Region", columns = c("Region_Formatted")),
    colGroup(name = "ECCE", columns = c("ECCE_Schools_Damaged", "ECCE_Students_Affected")),
    colGroup(name = "Primary", columns = c("Primary_Schools_Damaged", "Primary_Students_Affected")),
    colGroup(name = "Secondary", columns = c("Secondary_Schools_Damaged", "Secondary_Students_Affected"))
  ),
  striped = TRUE,
  highlight = TRUE,
  bordered = TRUE,
  theme = reactableTheme(
    headerStyle = list(
      "&:hover" = list(background = "#eee")
    ),
    borderColor = "#ddd",
    stripedColor = "#f6f8fa"
  ),
  defaultPageSize = 15,
  showPageSizeOptions = TRUE,
  pageSizeOptions = c(10, 15, 25, 50, 75, 100),
  showSortable = TRUE
)

```

## Resources needed to be sent to those affected

```{r}
# Load required packages
library(dplyr)
library(tidyr)
library(reactable)
library(htmltools)
library(readxl)

# Load the resource response configuration
resource_config <- read_excel(here("Second documents", "13. Resource_Sent_Response.xlsx"))

# Create a function to get resource multipliers from config
get_resource_multiplier <- function(resource_type) {
  multiplier <- resource_config %>%
    filter(Cluster == "Education", Indicator == resource_type) %>%
    pull(Value)
  
  return(ifelse(length(multiplier) > 0, multiplier, 0))
}

# Configuration parameters
days_of_support <- 14  # Number of days to provide resources
default_cyclone_category <- 4  # Default cyclone category (can be customized)

# Function to calculate resources needed
calculate_resources <- function(region_data, cyclone_category, days = 14) {
  
  region_data %>%
    mutate(
      # Get damage multiplier for this cyclone category
      damage_multiplier = get_damage_multiplier(cyclone_category, "ecce", "Schools"), # Same multiplier for all
      
      # ECCE Resources
      ECCE_Tents = round(ECCE_Schools * damage_multiplier * get_resource_multiplier("Tent"), 0),
      ECCE_Solar_Lamps = round(ECCE_Schools * damage_multiplier * get_resource_multiplier("Solar Lamp"), 0),
      ECCE_Water = ceiling(ECCE_Students * damage_multiplier * get_resource_multiplier("Water") * days), # Round up for bottles
      ECCE_Rice = round(ECCE_Students * damage_multiplier * get_resource_multiplier("Rice") * days, 1),
      ECCE_Tin_Fish = round(ECCE_Students * damage_multiplier * get_resource_multiplier("Tin fish") * days, 0),
      
      # Primary Resources  
      Primary_Tents = round(Primary_Schools * damage_multiplier * get_resource_multiplier("Tent"), 0),
      Primary_Solar_Lamps = round(Primary_Schools * damage_multiplier * get_resource_multiplier("Solar Lamp"), 0),
      Primary_Water = ceiling(Primary_Students * damage_multiplier * get_resource_multiplier("Water") * days), # Round up for bottles
      Primary_Rice = round(Primary_Students * damage_multiplier * get_resource_multiplier("Rice") * days, 1),
      Primary_Tin_Fish = round(Primary_Students * damage_multiplier * get_resource_multiplier("Tin fish") * days, 0),
      
      # Secondary Resources
      Secondary_Tents = round(Secondary_Schools * damage_multiplier * get_resource_multiplier("Tent"), 0),
      Secondary_Solar_Lamps = round(Secondary_Schools * damage_multiplier * get_resource_multiplier("Solar Lamp"), 0),
      Secondary_Water = ceiling(Secondary_Students * damage_multiplier * get_resource_multiplier("Water") * days), # Round up for bottles
      Secondary_Rice = round(Secondary_Students * damage_multiplier * get_resource_multiplier("Rice") * days, 1),
      Secondary_Tin_Fish = round(Secondary_Students * damage_multiplier * get_resource_multiplier("Tin fish") * days, 0),
      
      # Total Resources (sum across all education levels)
      Total_Tents = ECCE_Tents + Primary_Tents + Secondary_Tents,
      Total_Solar_Lamps = ECCE_Solar_Lamps + Primary_Solar_Lamps + Secondary_Solar_Lamps,
      Total_Water = ECCE_Water + Primary_Water + Secondary_Water, # Already whole numbers
      Total_Rice = round(ECCE_Rice + Primary_Rice + Secondary_Rice, 1),
      Total_Tin_Fish = ECCE_Tin_Fish + Primary_Tin_Fish + Secondary_Tin_Fish
    ) %>%
    select(Region_Formatted, contains("Tents"), contains("Solar_Lamps"), contains("Water"), contains("Rice"), contains("Tin_Fish"))
}

# Apply resource calculations to all regions using the education_wide dataset
resources_needed <- education_wide %>%
  select(Region_Formatted, contains("ECCE"), contains("Primary"), contains("Secondary")) %>%
  calculate_resources(default_cyclone_category, days_of_support)

# Create the resources needed reactable
reactable(
  resources_needed,
  columns = list(
    Region_Formatted = colDef(
      name = "Region", 
      minWidth = 150,
      sticky = "left",
      html = TRUE # Allow HTML formatting for bold text
    ),
    
    # ECCE columns
    ECCE_Tents = colDef(name = "Tents", format = colFormat(digits = 0)),
    ECCE_Solar_Lamps = colDef(name = "Solar Lamps", format = colFormat(digits = 0)),
    ECCE_Water = colDef(name = "Water (1L bottles)", format = colFormat(digits = 0)),
    ECCE_Rice = colDef(name = "Rice (kg)", format = colFormat(digits = 1)),
    ECCE_Tin_Fish = colDef(name = "Tinned Fish", format = colFormat(digits = 0)),
    
    # Primary columns  
    Primary_Tents = colDef(name = "Tents", format = colFormat(digits = 0)),
    Primary_Solar_Lamps = colDef(name = "Solar Lamps", format = colFormat(digits = 0)),
    Primary_Water = colDef(name = "Water (1L bottles)", format = colFormat(digits = 0)),
    Primary_Rice = colDef(name = "Rice (kg)", format = colFormat(digits = 1)),
    Primary_Tin_Fish = colDef(name = "Tinned Fish", format = colFormat(digits = 0)),
    
    # Secondary columns
    Secondary_Tents = colDef(name = "Tents", format = colFormat(digits = 0)),
    Secondary_Solar_Lamps = colDef(name = "Solar Lamps", format = colFormat(digits = 0)),
    Secondary_Water = colDef(name = "Water (1L bottles)", format = colFormat(digits = 0)),
    Secondary_Rice = colDef(name = "Rice (kg)", format = colFormat(digits = 1)),
    Secondary_Tin_Fish = colDef(name = "Tinned Fish", format = colFormat(digits = 0)),
    
    # Total columns
    Total_Tents = colDef(name = "Tents", format = colFormat(digits = 0)),
    Total_Solar_Lamps = colDef(name = "Solar Lamps", format = colFormat(digits = 0)),
    Total_Water = colDef(name = "Water (1L bottles)", format = colFormat(digits = 0)),
    Total_Rice = colDef(name = "Rice (kg)", format = colFormat(digits = 1)),
    Total_Tin_Fish = colDef(name = "Tinned Fish", format = colFormat(digits = 0))
  ),
  columnGroups = list(
    colGroup(name = "Region", columns = c("Region_Formatted")),
    colGroup(name = "ECCE", columns = c("ECCE_Tents", "ECCE_Solar_Lamps", "ECCE_Water", "ECCE_Rice", "ECCE_Tin_Fish")),
    colGroup(name = "Primary", columns = c("Primary_Tents", "Primary_Solar_Lamps", "Primary_Water", "Primary_Rice", "Primary_Tin_Fish")),
    colGroup(name = "Secondary", columns = c("Secondary_Tents", "Secondary_Solar_Lamps", "Secondary_Water", "Secondary_Rice", "Secondary_Tin_Fish")),
    colGroup(name = "Totals", columns = c("Total_Tents", "Total_Solar_Lamps", "Total_Water", "Total_Rice", "Total_Tin_Fish"))
  ),
  striped = TRUE,
  highlight = TRUE,
  bordered = TRUE,
  theme = reactableTheme(
    headerStyle = list(
      "&:hover" = list(background = "#eee")
    ),
    borderColor = "#ddd",
    stripedColor = "#f6f8fa"
  ),
  defaultPageSize = 15,
  showPageSizeOptions = TRUE,
  pageSizeOptions = c(10, 15, 25, 50, 75, 100),
  showSortable = TRUE
)
```

## Estimate financial damage from cyclone

```{r}

# Load required packages
library(dplyr)
library(tidyr)
library(reactable)
library(htmltools)
library(readxl)

# Load the financial damage estimation config
financial_config <- read_excel(here("Second documents", "14. Estimation_Financial_Damage.xlsx"))

# Clean column names to remove any extra spaces
names(financial_config) <- trimws(names(financial_config))

# Create a function to get unit costs from config
get_unit_cost <- function(school_type) {
  unit_cost <- financial_config %>%
    filter(trimws(Cluster) == "Education", 
           trimws(tolower(Attribute)) == tolower(school_type),
           grepl("Number Schools", trimws(Indicator), ignore.case = TRUE)) %>%
    pull(Value)
  
  return(ifelse(length(unit_cost) > 0, unit_cost, 0))
}

# Configuration parameters
default_cyclone_category <- 4  # Default cyclone category (can be customized)

# Function to calculate financial damage
calculate_financial_damage <- function(region_data, cyclone_category) {
  
  region_data %>%
    mutate(
      # Get damage multiplier for this cyclone category
      damage_multiplier = get_damage_multiplier(cyclone_category, "ecce", "Schools"), # Same multiplier for all
      
      # Calculate financial damage per education level (in VT)
      ECCE_Financial_Damage = ECCE_Schools * get_unit_cost("ecce") * damage_multiplier,
      Primary_Financial_Damage = Primary_Schools * get_unit_cost("primary") * damage_multiplier,
      Secondary_Financial_Damage = Secondary_Schools * get_unit_cost("secondary") * damage_multiplier,
      
      # Calculate total financial damage
      Total_Financial_Damage = ECCE_Financial_Damage + Primary_Financial_Damage + Secondary_Financial_Damage
    ) %>%
    select(Region_Formatted, contains("Financial_Damage"))
}

# Apply financial damage calculations to all regions using the education_wide dataset
financial_damage <- education_wide %>%
  select(Region_Formatted, contains("ECCE"), contains("Primary"), contains("Secondary")) %>%
  calculate_financial_damage(default_cyclone_category)

# Create the financial damage reactable
reactable(
  financial_damage,
  columns = list(
    Region_Formatted = colDef(
      name = "Region", 
      minWidth = 150,
      sticky = "left",
      html = TRUE # Allow HTML formatting for bold text
    ),
    
    # Financial damage columns
    ECCE_Financial_Damage = colDef(
      name = "ECCE", 
      format = colFormat(suffix = " VT", separators = TRUE, digits = 0)
    ),
    Primary_Financial_Damage = colDef(
      name = "Primary", 
      format = colFormat(suffix = " VT", separators = TRUE, digits = 0)
    ),
    Secondary_Financial_Damage = colDef(
      name = "Secondary", 
      format = colFormat(suffix = " VT", separators = TRUE, digits = 0)
    ),
    Total_Financial_Damage = colDef(
      name = "Total", 
      format = colFormat(suffix = " VT", separators = TRUE, digits = 0)
    )
  ),
  striped = TRUE,
  highlight = TRUE,
  bordered = TRUE,
  theme = reactableTheme(
    headerStyle = list(
      "&:hover" = list(background = "#eee")
    ),
    borderColor = "#ddd",
    stripedColor = "#f6f8fa"
  ),
  defaultPageSize = 15,
  showPageSizeOptions = TRUE,
  pageSizeOptions = c(10, 15, 25, 50, 75, 100),
  showSortable = TRUE
)


```
